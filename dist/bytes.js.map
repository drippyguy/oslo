{"version":3,"sources":["../src/bytes.ts"],"sourcesContent":["import type { TypedArray } from \"./index.js\";\n\nexport function byteToBinary(byte: number): string {\n\treturn byte.toString(2).padStart(8, \"0\");\n}\n\nexport function bytesToBinary(bytes: Uint8Array): string {\n\treturn [...bytes].map((val) => byteToBinary(val)).join(\"\");\n}\n\nexport function binaryToInteger(bits: string): number {\n\treturn parseInt(bits, 2);\n}\n\nexport function bytesToInteger(bytes: Uint8Array): number {\n\treturn parseInt(bytesToBinary(bytes), 2);\n}\n\nexport function compareBytes(\n\tbuffer1: ArrayBuffer | TypedArray,\n\tbuffer2: ArrayBuffer | TypedArray\n): boolean {\n\tconst bytes1 = new Uint8Array(buffer1);\n\tconst bytes2 = new Uint8Array(buffer2);\n\tif (bytes1.byteLength !== bytes2.byteLength) return false;\n\tfor (let i = 0; i < bytes1.byteLength; i++) {\n\t\tif (bytes1[i] !== bytes2[i]) return false;\n\t}\n\treturn true;\n}\n"],"mappings":"AAEO,SAAS,aAAa,MAAsB;AAClD,SAAO,KAAK,SAAS,CAAC,EAAE,SAAS,GAAG,GAAG;AACxC;AAEO,SAAS,cAAc,OAA2B;AACxD,SAAO,CAAC,GAAG,KAAK,EAAE,IAAI,CAAC,QAAQ,aAAa,GAAG,CAAC,EAAE,KAAK,EAAE;AAC1D;AAEO,SAAS,gBAAgB,MAAsB;AACrD,SAAO,SAAS,MAAM,CAAC;AACxB;AAEO,SAAS,eAAe,OAA2B;AACzD,SAAO,SAAS,cAAc,KAAK,GAAG,CAAC;AACxC;AAEO,SAAS,aACf,SACA,SACU;AACV,QAAM,SAAS,IAAI,WAAW,OAAO;AACrC,QAAM,SAAS,IAAI,WAAW,OAAO;AACrC,MAAI,OAAO,eAAe,OAAO;AAAY,WAAO;AACpD,WAAS,IAAI,GAAG,IAAI,OAAO,YAAY,KAAK;AAC3C,QAAI,OAAO,CAAC,MAAM,OAAO,CAAC;AAAG,aAAO;AAAA,EACrC;AACA,SAAO;AACR;","names":[]}