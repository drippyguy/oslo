{"version":3,"sources":["../../src/crypto/rsa.test.ts"],"sourcesContent":["import { describe, test, expect } from \"vitest\";\nimport { RSASSAPKCS1v1_5, RSASSAPSS } from \"./rsa.js\";\n\nimport type { SHAHash } from \"./sha.js\";\n\ninterface TestCase {\n\thash: SHAHash;\n}\n\nconst testCases: TestCase[] = [\n\t{\n\t\thash: \"SHA-1\"\n\t},\n\t{\n\t\thash: \"SHA-256\"\n\t},\n\t{\n\t\thash: \"SHA-384\"\n\t},\n\t{\n\t\thash: \"SHA-512\"\n\t}\n];\n\ndescribe.each(testCases)(\"RSASSAPKCS1v1_5($hash)\", ({ hash }) => {\n\ttest(\"Creates and verifies signature\", async () => {\n\t\tconst rsa = new RSASSAPKCS1v1_5(hash);\n\t\tconst data = new TextEncoder().encode(\"Hello world!\");\n\t\tconst { publicKey, privateKey } = await rsa.generateKeyPair();\n\t\tconst signature = await rsa.sign(privateKey, data);\n\t\tawait expect(rsa.verify(publicKey, signature, data)).resolves.toBe(true);\n\t});\n\ttest(\"Fails on invalid signature\", async () => {\n\t\tconst rsa = new RSASSAPKCS1v1_5(hash);\n\t\tconst data = new TextEncoder().encode(\"Hello world!\");\n\t\tconst keyPairA = await rsa.generateKeyPair();\n\t\tconst signature = await rsa.sign(keyPairA.privateKey, data);\n\t\tconst keyPairB = await rsa.generateKeyPair();\n\t\tawait expect(rsa.verify(keyPairB.publicKey, signature, data)).resolves.toBe(false);\n\t});\n});\n\ndescribe.each(testCases)(\"RSASSAPSS($hash)\", ({ hash }) => {\n\ttest(\"Creates and verifies signature\", async () => {\n\t\tconst rsa = new RSASSAPSS(hash);\n\t\tconst data = new TextEncoder().encode(\"Hello world!\");\n\t\tconst { publicKey, privateKey } = await rsa.generateKeyPair();\n\t\tconst signature = await rsa.sign(privateKey, data);\n\t\tawait expect(rsa.verify(publicKey, signature, data)).resolves.toBe(true);\n\t});\n\ttest(\"Fails on invalid signature\", async () => {\n\t\tconst rsa = new RSASSAPKCS1v1_5(hash);\n\t\tconst data = new TextEncoder().encode(\"Hello world!\");\n\t\tconst keyPairA = await rsa.generateKeyPair();\n\t\tconst signature = await rsa.sign(keyPairA.privateKey, data);\n\t\tconst keyPairB = await rsa.generateKeyPair();\n\t\tawait expect(rsa.verify(keyPairB.publicKey, signature, data)).resolves.toBe(false);\n\t});\n});\n"],"mappings":";AAAA,oBAAuC;AACvC,iBAA2C;AAQ3C,MAAM,YAAwB;AAAA,EAC7B;AAAA,IACC,MAAM;AAAA,EACP;AAAA,EACA;AAAA,IACC,MAAM;AAAA,EACP;AAAA,EACA;AAAA,IACC,MAAM;AAAA,EACP;AAAA,EACA;AAAA,IACC,MAAM;AAAA,EACP;AACD;AAEA,uBAAS,KAAK,SAAS,EAAE,0BAA0B,CAAC,EAAE,KAAK,MAAM;AAChE,0BAAK,kCAAkC,YAAY;AAClD,UAAM,MAAM,IAAI,2BAAgB,IAAI;AACpC,UAAM,OAAO,IAAI,YAAY,EAAE,OAAO,cAAc;AACpD,UAAM,EAAE,WAAW,WAAW,IAAI,MAAM,IAAI,gBAAgB;AAC5D,UAAM,YAAY,MAAM,IAAI,KAAK,YAAY,IAAI;AACjD,cAAM,sBAAO,IAAI,OAAO,WAAW,WAAW,IAAI,CAAC,EAAE,SAAS,KAAK,IAAI;AAAA,EACxE,CAAC;AACD,0BAAK,8BAA8B,YAAY;AAC9C,UAAM,MAAM,IAAI,2BAAgB,IAAI;AACpC,UAAM,OAAO,IAAI,YAAY,EAAE,OAAO,cAAc;AACpD,UAAM,WAAW,MAAM,IAAI,gBAAgB;AAC3C,UAAM,YAAY,MAAM,IAAI,KAAK,SAAS,YAAY,IAAI;AAC1D,UAAM,WAAW,MAAM,IAAI,gBAAgB;AAC3C,cAAM,sBAAO,IAAI,OAAO,SAAS,WAAW,WAAW,IAAI,CAAC,EAAE,SAAS,KAAK,KAAK;AAAA,EAClF,CAAC;AACF,CAAC;AAED,uBAAS,KAAK,SAAS,EAAE,oBAAoB,CAAC,EAAE,KAAK,MAAM;AAC1D,0BAAK,kCAAkC,YAAY;AAClD,UAAM,MAAM,IAAI,qBAAU,IAAI;AAC9B,UAAM,OAAO,IAAI,YAAY,EAAE,OAAO,cAAc;AACpD,UAAM,EAAE,WAAW,WAAW,IAAI,MAAM,IAAI,gBAAgB;AAC5D,UAAM,YAAY,MAAM,IAAI,KAAK,YAAY,IAAI;AACjD,cAAM,sBAAO,IAAI,OAAO,WAAW,WAAW,IAAI,CAAC,EAAE,SAAS,KAAK,IAAI;AAAA,EACxE,CAAC;AACD,0BAAK,8BAA8B,YAAY;AAC9C,UAAM,MAAM,IAAI,2BAAgB,IAAI;AACpC,UAAM,OAAO,IAAI,YAAY,EAAE,OAAO,cAAc;AACpD,UAAM,WAAW,MAAM,IAAI,gBAAgB;AAC3C,UAAM,YAAY,MAAM,IAAI,KAAK,SAAS,YAAY,IAAI;AAC1D,UAAM,WAAW,MAAM,IAAI,gBAAgB;AAC3C,cAAM,sBAAO,IAAI,OAAO,SAAS,WAAW,WAAW,IAAI,CAAC,EAAE,SAAS,KAAK,KAAK;AAAA,EAClF,CAAC;AACF,CAAC;","names":[]}