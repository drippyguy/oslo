{"version":3,"sources":["../../src/crypto/hmac.test.ts"],"sourcesContent":["import { describe, test, expect } from \"vitest\";\nimport { HMAC } from \"./index.js\";\n\nimport type { SHAHash } from \"./sha.js\";\n\ninterface TestCase {\n\thash: SHAHash;\n}\n\nconst testCases: TestCase[] = [\n\t{\n\t\thash: \"SHA-1\"\n\t},\n\t{\n\t\thash: \"SHA-256\"\n\t},\n\t{\n\t\thash: \"SHA-384\"\n\t},\n\t{\n\t\thash: \"SHA-512\"\n\t}\n];\n\ndescribe.each(testCases)(\"HMAC($hash)\", ({ hash }) => {\n\ttest(\"Creates and verifies signature\", async () => {\n\t\tconst hmac = new HMAC(hash);\n\t\tconst data = new TextEncoder().encode(\"Hello world!\");\n\t\tconst key = await hmac.generateKey();\n\t\tconst signature = await hmac.sign(key, data);\n\t\tawait expect(hmac.verify(key, signature, data)).resolves.toBe(true);\n\t});\n\ttest(\"Fails on invalid signature\", async () => {\n\t\tconst hmac = new HMAC(hash);\n\t\tconst data = new TextEncoder().encode(\"Hello world!\");\n\t\tconst keyA = await hmac.generateKey();\n\t\tconst signature = await hmac.sign(keyA, data);\n\t\tconst keyB = await hmac.generateKey();\n\t\tawait expect(hmac.verify(keyB, signature, data)).resolves.toBe(false);\n\t});\n});\n"],"mappings":"AAAA,SAAS,UAAU,MAAM,cAAc;AACvC,SAAS,YAAY;AAQrB,MAAM,YAAwB;AAAA,EAC7B;AAAA,IACC,MAAM;AAAA,EACP;AAAA,EACA;AAAA,IACC,MAAM;AAAA,EACP;AAAA,EACA;AAAA,IACC,MAAM;AAAA,EACP;AAAA,EACA;AAAA,IACC,MAAM;AAAA,EACP;AACD;AAEA,SAAS,KAAK,SAAS,EAAE,eAAe,CAAC,EAAE,KAAK,MAAM;AACrD,OAAK,kCAAkC,YAAY;AAClD,UAAM,OAAO,IAAI,KAAK,IAAI;AAC1B,UAAM,OAAO,IAAI,YAAY,EAAE,OAAO,cAAc;AACpD,UAAM,MAAM,MAAM,KAAK,YAAY;AACnC,UAAM,YAAY,MAAM,KAAK,KAAK,KAAK,IAAI;AAC3C,UAAM,OAAO,KAAK,OAAO,KAAK,WAAW,IAAI,CAAC,EAAE,SAAS,KAAK,IAAI;AAAA,EACnE,CAAC;AACD,OAAK,8BAA8B,YAAY;AAC9C,UAAM,OAAO,IAAI,KAAK,IAAI;AAC1B,UAAM,OAAO,IAAI,YAAY,EAAE,OAAO,cAAc;AACpD,UAAM,OAAO,MAAM,KAAK,YAAY;AACpC,UAAM,YAAY,MAAM,KAAK,KAAK,MAAM,IAAI;AAC5C,UAAM,OAAO,MAAM,KAAK,YAAY;AACpC,UAAM,OAAO,KAAK,OAAO,MAAM,WAAW,IAAI,CAAC,EAAE,SAAS,KAAK,KAAK;AAAA,EACrE,CAAC;AACF,CAAC;","names":[]}