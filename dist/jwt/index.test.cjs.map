{"version":3,"sources":["../../src/jwt/index.test.ts"],"sourcesContent":["import { describe, test, expect } from \"vitest\";\nimport { createJWT, parseJWT, validateJWT } from \"./index.js\";\n\nimport { HMAC } from \"../crypto/hmac.js\";\nimport { ECDSA } from \"../crypto/ecdsa.js\";\nimport { RSASSAPKCS1v1_5, RSASSAPSS } from \"../crypto/rsa.js\";\nimport { TimeSpan } from \"../index.js\";\n\ntest.each([\"ES256\", \"ES384\", \"ES512\"] as const)(\n\t\"Create and validate JWT with %s\",\n\tasync (algorithm) => {\n\t\tconst { publicKey, privateKey } = await new ECDSA(\n\t\t\tecdsaDictionary[algorithm].hash,\n\t\t\tecdsaDictionary[algorithm].curve\n\t\t).generateKeyPair();\n\t\tconst jwt = await createJWT(algorithm, privateKey, {\n\t\t\tmessage: \"hello\"\n\t\t});\n\t\tconst validatedJWT = await validateJWT(algorithm, publicKey, jwt);\n\t\texpect(validatedJWT.algorithm).toBe(algorithm);\n\t\texpect(validatedJWT.header).toStrictEqual({\n\t\t\ttyp: \"JWT\",\n\t\t\talg: algorithm\n\t\t});\n\t\texpect(validatedJWT.payload).toStrictEqual({\n\t\t\tmessage: \"hello\"\n\t\t});\n\t}\n);\n\ntest.each([\"RS256\", \"RS384\", \"RS512\"] as const)(\n\t\"Create and validate JWT with %s\",\n\tasync (algorithm) => {\n\t\tconst { publicKey, privateKey } = await new RSASSAPKCS1v1_5(\n\t\t\trsassapkcs1v1_5Dictionary[algorithm]\n\t\t).generateKeyPair();\n\t\tconst jwt = await createJWT(algorithm, privateKey, {\n\t\t\tmessage: \"hello\"\n\t\t});\n\t\tconst validatedJWT = await validateJWT(algorithm, publicKey, jwt);\n\t\texpect(validatedJWT.algorithm).toBe(algorithm);\n\t\texpect(validatedJWT.header).toStrictEqual({\n\t\t\ttyp: \"JWT\",\n\t\t\talg: algorithm\n\t\t});\n\t\texpect(validatedJWT.payload).toStrictEqual({\n\t\t\tmessage: \"hello\"\n\t\t});\n\t}\n);\n\ntest.each([\"PS256\", \"PS384\", \"PS512\"] as const)(\n\t\"Create and validate JWT with %s\",\n\tasync (algorithm) => {\n\t\tconst { publicKey, privateKey } = await new RSASSAPSS(\n\t\t\trsassapssDictionary[algorithm]\n\t\t).generateKeyPair();\n\t\tconst jwt = await createJWT(algorithm, privateKey, {\n\t\t\tmessage: \"hello\"\n\t\t});\n\t\tconst validatedJWT = await validateJWT(algorithm, publicKey, jwt);\n\t\texpect(validatedJWT.algorithm).toBe(algorithm);\n\t\texpect(validatedJWT.header).toStrictEqual({\n\t\t\ttyp: \"JWT\",\n\t\t\talg: algorithm\n\t\t});\n\t\texpect(validatedJWT.payload).toStrictEqual({\n\t\t\tmessage: \"hello\"\n\t\t});\n\t}\n);\n\ntest.each([\"HS256\", \"HS384\", \"HS512\"] as const)(\n\t\"Create and validate JWT with %s\",\n\tasync (algorithm) => {\n\t\tconst secretKey = await new HMAC(hmacDictionary[algorithm]).generateKey();\n\t\tconst jwt = await createJWT(algorithm, secretKey, {\n\t\t\tmessage: \"hello\"\n\t\t});\n\t\tconst validatedJWT = await validateJWT(algorithm, secretKey, jwt);\n\t\texpect(validatedJWT.algorithm).toBe(algorithm);\n\t\texpect(validatedJWT.header).toStrictEqual({\n\t\t\ttyp: \"JWT\",\n\t\t\talg: algorithm\n\t\t});\n\t\texpect(validatedJWT.payload).toStrictEqual({\n\t\t\tmessage: \"hello\"\n\t\t});\n\t}\n);\n\ndescribe(\"createJWT()\", () => {\n\ttest(\"Creates the correct JWT value\", async () => {\n\t\tconst secretKey = new Uint8Array([\n\t\t\t8, 138, 53, 76, 210, 41, 194, 216, 13, 70, 56, 196, 237, 57, 69, 41, 152, 114, 223, 150, 169,\n\t\t\t154, 191, 89, 202, 118, 249, 18, 34, 208, 18, 101, 70, 236, 76, 178, 117, 129, 106, 71, 253,\n\t\t\t79, 99, 9, 64, 208, 102, 50, 118, 72, 107, 46, 120, 2, 240, 217, 103, 66, 63, 52, 248, 23,\n\t\t\t140, 46\n\t\t]);\n\t\tconst result = await createJWT(\n\t\t\t\"HS256\",\n\t\t\tsecretKey,\n\t\t\t{\n\t\t\t\tmessage: \"hello\",\n\t\t\t\tcount: 100\n\t\t\t},\n\t\t\t{\n\t\t\t\taudiences: [\"_audience\"],\n\t\t\t\tissuer: \"_issuer\",\n\t\t\t\tsubject: \"_subject\",\n\t\t\t\tjwtId: \"_jwtId\"\n\t\t\t}\n\t\t);\n\t\tconst expected =\n\t\t\t\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZXNzYWdlIjoiaGVsbG8iLCJjb3VudCI6MTAwLCJhdWQiOlsiX2F1ZGllbmNlIl0sInN1YiI6Il9zdWJqZWN0IiwiaXNzIjoiX2lzc3VlciIsImp0aSI6Il9qd3RJZCJ9.cKi5L4ZV79IHtpC-rXRwjnQIeWdswAvv1KavDSM_vds\";\n\t\texpect(result).toBe(expected);\n\t});\n});\n\ntest(\"parseJWT()\", async () => {\n\tconst secretKey = await new HMAC(\"SHA-256\").generateKey();\n\tconst currDateSeconds = Math.floor(Date.now() / 1000);\n\tconst jwt = await createJWT(\n\t\t\"HS256\",\n\t\tsecretKey,\n\t\t{\n\t\t\tmessage: \"hello\"\n\t\t},\n\t\t{\n\t\t\taudiences: [\"_audience\"],\n\t\t\tissuer: \"_issuer\",\n\t\t\tsubject: \"_subject\",\n\t\t\tjwtId: \"_jwtId\",\n\t\t\texpiresIn: new TimeSpan(1, \"h\"),\n\t\t\tnotBefore: new Date(),\n\t\t\tincludeIssuedTimestamp: true,\n\t\t\theaders: {\n\t\t\t\tkid: \"_kid\"\n\t\t\t}\n\t\t}\n\t);\n\texpect(parseJWT(jwt)).toEqual({\n\t\talgorithm: \"HS256\",\n\t\texpiresAt: new Date((currDateSeconds + new TimeSpan(1, \"h\").seconds()) * 1000),\n\t\tnotBefore: new Date(currDateSeconds * 1000),\n\t\tissuedAt: new Date(currDateSeconds * 1000),\n\t\taudiences: [\"_audience\"],\n\t\tissuer: \"_issuer\",\n\t\tsubject: \"_subject\",\n\t\tjwtId: \"_jwtId\",\n\t\tvalue: jwt,\n\t\tparts: jwt.split(\".\"),\n\t\theader: {\n\t\t\tkid: \"_kid\",\n\t\t\ttyp: \"JWT\",\n\t\t\talg: \"HS256\"\n\t\t},\n\t\tpayload: {\n\t\t\tmessage: \"hello\",\n\t\t\taud: [\"_audience\"],\n\t\t\tiss: \"_issuer\",\n\t\t\tsub: \"_subject\",\n\t\t\tjti: \"_jwtId\",\n\t\t\texp: currDateSeconds + new TimeSpan(1, \"h\").seconds(),\n\t\t\tiat: currDateSeconds,\n\t\t\tnbf: currDateSeconds\n\t\t}\n\t});\n});\n\ndescribe(\"validateJWT\", () => {\n\ttest(\"Checks expiration\", async () => {\n\t\tconst secretKey = await new HMAC(\"SHA-256\").generateKey();\n\t\tconst jwt1 = await createJWT(\n\t\t\t\"HS256\",\n\t\t\tsecretKey,\n\t\t\t{},\n\t\t\t{\n\t\t\t\texpiresIn: new TimeSpan(-1, \"s\")\n\t\t\t}\n\t\t);\n\t\tconst jwt2 = await createJWT(\n\t\t\t\"HS256\",\n\t\t\tsecretKey,\n\t\t\t{},\n\t\t\t{\n\t\t\t\texpiresIn: new TimeSpan(0, \"s\")\n\t\t\t}\n\t\t);\n\t\tawait expect(validateJWT(\"HS256\", secretKey, jwt1)).rejects.toThrowError();\n\t\tawait expect(validateJWT(\"HS256\", secretKey, jwt2)).rejects.toThrowError();\n\t});\n\ttest(\"Checks not before time\", async () => {\n\t\tconst secretKey = await new HMAC(\"SHA-256\").generateKey();\n\t\tconst jwt1 = await createJWT(\n\t\t\t\"HS256\",\n\t\t\tsecretKey,\n\t\t\t{},\n\t\t\t{\n\t\t\t\tnotBefore: new Date(Date.now() + 1000)\n\t\t\t}\n\t\t);\n\t\tconst jwt2 = await createJWT(\n\t\t\t\"HS256\",\n\t\t\tsecretKey,\n\t\t\t{},\n\t\t\t{\n\t\t\t\tnotBefore: new Date()\n\t\t\t}\n\t\t);\n\t\tawait expect(validateJWT(\"HS256\", secretKey, jwt1)).rejects.toThrowError();\n\t\tawait expect(validateJWT(\"HS256\", secretKey, jwt2)).resolves.not.toThrowError();\n\t});\n\ttest(\"Throws on invalid algorithm\", async () => {\n\t\tconst secretKey = await new HMAC(\"SHA-256\").generateKey();\n\t\tconst jwt = await createJWT(\n\t\t\t\"HS256\",\n\t\t\tsecretKey,\n\t\t\t{},\n\t\t\t{\n\t\t\t\tnotBefore: new Date(Date.now() + 1000)\n\t\t\t}\n\t\t);\n\t\tawait expect(validateJWT(\"HS512\", secretKey, jwt)).rejects.toThrowError();\n\t});\n\ttest(\"Throws on invalid signature\", async () => {\n\t\tconst secretKey = await new HMAC(\"SHA-256\").generateKey();\n\t\tconst jwt = await createJWT(\n\t\t\t\"HS256\",\n\t\t\tsecretKey,\n\t\t\t{},\n\t\t\t{\n\t\t\t\tnotBefore: new Date(Date.now() + 1000)\n\t\t\t}\n\t\t);\n\t\tconst invalidKey = await new HMAC(\"SHA-256\").generateKey();\n\t\tawait expect(validateJWT(\"HS512\", invalidKey, jwt)).rejects.toThrowError();\n\t});\n\ttest(\"Throws on invalid JWT\", async () => {\n\t\tconst secretKey = await new HMAC(\"SHA-256\").generateKey();\n\t\tawait expect(validateJWT(\"HS256\", secretKey, \"huhuihdeuihdiheud\")).rejects.toThrowError();\n\t\tawait expect(\n\t\t\tvalidateJWT(\"HS256\", secretKey, \"huhuihdeuihdiheudheiuhdehd.dededed.deded\")\n\t\t).rejects.toThrowError();\n\t});\n});\n\nconst ecdsaDictionary = {\n\tES256: {\n\t\thash: \"SHA-256\",\n\t\tcurve: \"P-256\"\n\t},\n\tES384: {\n\t\thash: \"SHA-384\",\n\t\tcurve: \"P-384\"\n\t},\n\tES512: {\n\t\thash: \"SHA-512\",\n\t\tcurve: \"P-521\"\n\t}\n} as const;\n\nconst hmacDictionary = {\n\tHS256: \"SHA-256\",\n\tHS384: \"SHA-384\",\n\tHS512: \"SHA-512\"\n} as const;\n\nconst rsassapkcs1v1_5Dictionary = {\n\tRS256: \"SHA-256\",\n\tRS384: \"SHA-384\",\n\tRS512: \"SHA-512\"\n} as const;\n\nconst rsassapssDictionary = {\n\tPS256: \"SHA-256\",\n\tPS384: \"SHA-384\",\n\tPS512: \"SHA-512\"\n} as const;\n"],"mappings":";AAAA,oBAAuC;AACvC,mBAAiD;AAEjD,kBAAqB;AACrB,mBAAsB;AACtB,iBAA2C;AAC3C,eAAyB;AAEzB,mBAAK,KAAK,CAAC,SAAS,SAAS,OAAO,CAAU;AAAA,EAC7C;AAAA,EACA,OAAO,cAAc;AACpB,UAAM,EAAE,WAAW,WAAW,IAAI,MAAM,IAAI;AAAA,MAC3C,gBAAgB,SAAS,EAAE;AAAA,MAC3B,gBAAgB,SAAS,EAAE;AAAA,IAC5B,EAAE,gBAAgB;AAClB,UAAM,MAAM,UAAM,wBAAU,WAAW,YAAY;AAAA,MAClD,SAAS;AAAA,IACV,CAAC;AACD,UAAM,eAAe,UAAM,0BAAY,WAAW,WAAW,GAAG;AAChE,8BAAO,aAAa,SAAS,EAAE,KAAK,SAAS;AAC7C,8BAAO,aAAa,MAAM,EAAE,cAAc;AAAA,MACzC,KAAK;AAAA,MACL,KAAK;AAAA,IACN,CAAC;AACD,8BAAO,aAAa,OAAO,EAAE,cAAc;AAAA,MAC1C,SAAS;AAAA,IACV,CAAC;AAAA,EACF;AACD;AAEA,mBAAK,KAAK,CAAC,SAAS,SAAS,OAAO,CAAU;AAAA,EAC7C;AAAA,EACA,OAAO,cAAc;AACpB,UAAM,EAAE,WAAW,WAAW,IAAI,MAAM,IAAI;AAAA,MAC3C,0BAA0B,SAAS;AAAA,IACpC,EAAE,gBAAgB;AAClB,UAAM,MAAM,UAAM,wBAAU,WAAW,YAAY;AAAA,MAClD,SAAS;AAAA,IACV,CAAC;AACD,UAAM,eAAe,UAAM,0BAAY,WAAW,WAAW,GAAG;AAChE,8BAAO,aAAa,SAAS,EAAE,KAAK,SAAS;AAC7C,8BAAO,aAAa,MAAM,EAAE,cAAc;AAAA,MACzC,KAAK;AAAA,MACL,KAAK;AAAA,IACN,CAAC;AACD,8BAAO,aAAa,OAAO,EAAE,cAAc;AAAA,MAC1C,SAAS;AAAA,IACV,CAAC;AAAA,EACF;AACD;AAEA,mBAAK,KAAK,CAAC,SAAS,SAAS,OAAO,CAAU;AAAA,EAC7C;AAAA,EACA,OAAO,cAAc;AACpB,UAAM,EAAE,WAAW,WAAW,IAAI,MAAM,IAAI;AAAA,MAC3C,oBAAoB,SAAS;AAAA,IAC9B,EAAE,gBAAgB;AAClB,UAAM,MAAM,UAAM,wBAAU,WAAW,YAAY;AAAA,MAClD,SAAS;AAAA,IACV,CAAC;AACD,UAAM,eAAe,UAAM,0BAAY,WAAW,WAAW,GAAG;AAChE,8BAAO,aAAa,SAAS,EAAE,KAAK,SAAS;AAC7C,8BAAO,aAAa,MAAM,EAAE,cAAc;AAAA,MACzC,KAAK;AAAA,MACL,KAAK;AAAA,IACN,CAAC;AACD,8BAAO,aAAa,OAAO,EAAE,cAAc;AAAA,MAC1C,SAAS;AAAA,IACV,CAAC;AAAA,EACF;AACD;AAEA,mBAAK,KAAK,CAAC,SAAS,SAAS,OAAO,CAAU;AAAA,EAC7C;AAAA,EACA,OAAO,cAAc;AACpB,UAAM,YAAY,MAAM,IAAI,iBAAK,eAAe,SAAS,CAAC,EAAE,YAAY;AACxE,UAAM,MAAM,UAAM,wBAAU,WAAW,WAAW;AAAA,MACjD,SAAS;AAAA,IACV,CAAC;AACD,UAAM,eAAe,UAAM,0BAAY,WAAW,WAAW,GAAG;AAChE,8BAAO,aAAa,SAAS,EAAE,KAAK,SAAS;AAC7C,8BAAO,aAAa,MAAM,EAAE,cAAc;AAAA,MACzC,KAAK;AAAA,MACL,KAAK;AAAA,IACN,CAAC;AACD,8BAAO,aAAa,OAAO,EAAE,cAAc;AAAA,MAC1C,SAAS;AAAA,IACV,CAAC;AAAA,EACF;AACD;AAAA,IAEA,wBAAS,eAAe,MAAM;AAC7B,0BAAK,iCAAiC,YAAY;AACjD,UAAM,YAAY,IAAI,WAAW;AAAA,MAChC;AAAA,MAAG;AAAA,MAAK;AAAA,MAAI;AAAA,MAAI;AAAA,MAAK;AAAA,MAAI;AAAA,MAAK;AAAA,MAAK;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAK;AAAA,MAAK;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAK;AAAA,MAAK;AAAA,MAAK;AAAA,MAAK;AAAA,MACzF;AAAA,MAAK;AAAA,MAAK;AAAA,MAAI;AAAA,MAAK;AAAA,MAAK;AAAA,MAAK;AAAA,MAAI;AAAA,MAAI;AAAA,MAAK;AAAA,MAAI;AAAA,MAAK;AAAA,MAAI;AAAA,MAAK;AAAA,MAAI;AAAA,MAAK;AAAA,MAAK;AAAA,MAAK;AAAA,MAAK;AAAA,MAAI;AAAA,MACxF;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAK;AAAA,MAAK;AAAA,MAAI;AAAA,MAAK;AAAA,MAAI;AAAA,MAAK;AAAA,MAAI;AAAA,MAAK;AAAA,MAAG;AAAA,MAAK;AAAA,MAAK;AAAA,MAAK;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAK;AAAA,MACvF;AAAA,MAAK;AAAA,IACN,CAAC;AACD,UAAM,SAAS,UAAM;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,QACC,SAAS;AAAA,QACT,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,WAAW,CAAC,WAAW;AAAA,QACvB,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,OAAO;AAAA,MACR;AAAA,IACD;AACA,UAAM,WACL;AACD,8BAAO,MAAM,EAAE,KAAK,QAAQ;AAAA,EAC7B,CAAC;AACF,CAAC;AAAA,IAED,oBAAK,cAAc,YAAY;AAC9B,QAAM,YAAY,MAAM,IAAI,iBAAK,SAAS,EAAE,YAAY;AACxD,QAAM,kBAAkB,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AACpD,QAAM,MAAM,UAAM;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,MACC,SAAS;AAAA,IACV;AAAA,IACA;AAAA,MACC,WAAW,CAAC,WAAW;AAAA,MACvB,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,OAAO;AAAA,MACP,WAAW,IAAI,kBAAS,GAAG,GAAG;AAAA,MAC9B,WAAW,oBAAI,KAAK;AAAA,MACpB,wBAAwB;AAAA,MACxB,SAAS;AAAA,QACR,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACA,gCAAO,uBAAS,GAAG,CAAC,EAAE,QAAQ;AAAA,IAC7B,WAAW;AAAA,IACX,WAAW,IAAI,MAAM,kBAAkB,IAAI,kBAAS,GAAG,GAAG,EAAE,QAAQ,KAAK,GAAI;AAAA,IAC7E,WAAW,IAAI,KAAK,kBAAkB,GAAI;AAAA,IAC1C,UAAU,IAAI,KAAK,kBAAkB,GAAI;AAAA,IACzC,WAAW,CAAC,WAAW;AAAA,IACvB,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO,IAAI,MAAM,GAAG;AAAA,IACpB,QAAQ;AAAA,MACP,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACN;AAAA,IACA,SAAS;AAAA,MACR,SAAS;AAAA,MACT,KAAK,CAAC,WAAW;AAAA,MACjB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK,kBAAkB,IAAI,kBAAS,GAAG,GAAG,EAAE,QAAQ;AAAA,MACpD,KAAK;AAAA,MACL,KAAK;AAAA,IACN;AAAA,EACD,CAAC;AACF,CAAC;AAAA,IAED,wBAAS,eAAe,MAAM;AAC7B,0BAAK,qBAAqB,YAAY;AACrC,UAAM,YAAY,MAAM,IAAI,iBAAK,SAAS,EAAE,YAAY;AACxD,UAAM,OAAO,UAAM;AAAA,MAClB;AAAA,MACA;AAAA,MACA,CAAC;AAAA,MACD;AAAA,QACC,WAAW,IAAI,kBAAS,IAAI,GAAG;AAAA,MAChC;AAAA,IACD;AACA,UAAM,OAAO,UAAM;AAAA,MAClB;AAAA,MACA;AAAA,MACA,CAAC;AAAA,MACD;AAAA,QACC,WAAW,IAAI,kBAAS,GAAG,GAAG;AAAA,MAC/B;AAAA,IACD;AACA,cAAM,0BAAO,0BAAY,SAAS,WAAW,IAAI,CAAC,EAAE,QAAQ,aAAa;AACzE,cAAM,0BAAO,0BAAY,SAAS,WAAW,IAAI,CAAC,EAAE,QAAQ,aAAa;AAAA,EAC1E,CAAC;AACD,0BAAK,0BAA0B,YAAY;AAC1C,UAAM,YAAY,MAAM,IAAI,iBAAK,SAAS,EAAE,YAAY;AACxD,UAAM,OAAO,UAAM;AAAA,MAClB;AAAA,MACA;AAAA,MACA,CAAC;AAAA,MACD;AAAA,QACC,WAAW,IAAI,KAAK,KAAK,IAAI,IAAI,GAAI;AAAA,MACtC;AAAA,IACD;AACA,UAAM,OAAO,UAAM;AAAA,MAClB;AAAA,MACA;AAAA,MACA,CAAC;AAAA,MACD;AAAA,QACC,WAAW,oBAAI,KAAK;AAAA,MACrB;AAAA,IACD;AACA,cAAM,0BAAO,0BAAY,SAAS,WAAW,IAAI,CAAC,EAAE,QAAQ,aAAa;AACzE,cAAM,0BAAO,0BAAY,SAAS,WAAW,IAAI,CAAC,EAAE,SAAS,IAAI,aAAa;AAAA,EAC/E,CAAC;AACD,0BAAK,+BAA+B,YAAY;AAC/C,UAAM,YAAY,MAAM,IAAI,iBAAK,SAAS,EAAE,YAAY;AACxD,UAAM,MAAM,UAAM;AAAA,MACjB;AAAA,MACA;AAAA,MACA,CAAC;AAAA,MACD;AAAA,QACC,WAAW,IAAI,KAAK,KAAK,IAAI,IAAI,GAAI;AAAA,MACtC;AAAA,IACD;AACA,cAAM,0BAAO,0BAAY,SAAS,WAAW,GAAG,CAAC,EAAE,QAAQ,aAAa;AAAA,EACzE,CAAC;AACD,0BAAK,+BAA+B,YAAY;AAC/C,UAAM,YAAY,MAAM,IAAI,iBAAK,SAAS,EAAE,YAAY;AACxD,UAAM,MAAM,UAAM;AAAA,MACjB;AAAA,MACA;AAAA,MACA,CAAC;AAAA,MACD;AAAA,QACC,WAAW,IAAI,KAAK,KAAK,IAAI,IAAI,GAAI;AAAA,MACtC;AAAA,IACD;AACA,UAAM,aAAa,MAAM,IAAI,iBAAK,SAAS,EAAE,YAAY;AACzD,cAAM,0BAAO,0BAAY,SAAS,YAAY,GAAG,CAAC,EAAE,QAAQ,aAAa;AAAA,EAC1E,CAAC;AACD,0BAAK,yBAAyB,YAAY;AACzC,UAAM,YAAY,MAAM,IAAI,iBAAK,SAAS,EAAE,YAAY;AACxD,cAAM,0BAAO,0BAAY,SAAS,WAAW,mBAAmB,CAAC,EAAE,QAAQ,aAAa;AACxF,cAAM;AAAA,UACL,0BAAY,SAAS,WAAW,0CAA0C;AAAA,IAC3E,EAAE,QAAQ,aAAa;AAAA,EACxB,CAAC;AACF,CAAC;AAED,MAAM,kBAAkB;AAAA,EACvB,OAAO;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,EACR;AAAA,EACA,OAAO;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,EACR;AAAA,EACA,OAAO;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,EACR;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AACR;AAEA,MAAM,4BAA4B;AAAA,EACjC,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AACR;AAEA,MAAM,sBAAsB;AAAA,EAC3B,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AACR;","names":[]}