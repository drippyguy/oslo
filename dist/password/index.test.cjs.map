{"version":3,"sources":["../../src/password/index.test.ts"],"sourcesContent":["import { test, expect } from \"vitest\";\nimport { Argon2id, Bcrypt, Scrypt } from \"./index.js\";\nimport { encodeHex } from \"../encoding/index.js\";\n\ntest(\"Argon2id\", async () => {\n\tconst password = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tconst argon2id = new Argon2id();\n\tconst hash = await argon2id.hash(password);\n\texpect(argon2id.verify(hash, password)).resolves.toBe(true);\n});\n\ntest(\"Bcrypt\", async () => {\n\tconst password = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tconst bcrypt = new Bcrypt();\n\tconst hash = await bcrypt.hash(password);\n\texpect(bcrypt.verify(hash, password)).resolves.toBe(true);\n});\n\ntest(\"Argon2id\", async () => {\n\tconst password = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tconst scrypt = new Scrypt();\n\tconst hash = await scrypt.hash(password);\n\texpect(scrypt.verify(hash, password)).resolves.toBe(true);\n});\n"],"mappings":";AAAA,oBAA6B;AAC7B,mBAAyC;AACzC,sBAA0B;AAAA,IAE1B,oBAAK,YAAY,YAAY;AAC5B,QAAM,eAAW,2BAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACrE,QAAM,WAAW,IAAI,sBAAS;AAC9B,QAAM,OAAO,MAAM,SAAS,KAAK,QAAQ;AACzC,4BAAO,SAAS,OAAO,MAAM,QAAQ,CAAC,EAAE,SAAS,KAAK,IAAI;AAC3D,CAAC;AAAA,IAED,oBAAK,UAAU,YAAY;AAC1B,QAAM,eAAW,2BAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACrE,QAAM,SAAS,IAAI,oBAAO;AAC1B,QAAM,OAAO,MAAM,OAAO,KAAK,QAAQ;AACvC,4BAAO,OAAO,OAAO,MAAM,QAAQ,CAAC,EAAE,SAAS,KAAK,IAAI;AACzD,CAAC;AAAA,IAED,oBAAK,YAAY,YAAY;AAC5B,QAAM,eAAW,2BAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACrE,QAAM,SAAS,IAAI,oBAAO;AAC1B,QAAM,OAAO,MAAM,OAAO,KAAK,QAAQ;AACvC,4BAAO,OAAO,OAAO,MAAM,QAAQ,CAAC,EAAE,SAAS,KAAK,IAAI;AACzD,CAAC;","names":[]}