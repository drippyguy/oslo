{"version":3,"sources":["../../src/password/index.test.ts"],"sourcesContent":["import { test, expect } from \"vitest\";\nimport { Argon2id, Bcrypt, Scrypt } from \"./index.js\";\nimport { encodeHex } from \"../encoding/index.js\";\n\ntest(\"Argon2id\", async () => {\n\tconst password = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tconst argon2id = new Argon2id();\n\tconst hash = await argon2id.hash(password);\n\texpect(argon2id.verify(hash, password)).resolves.toBe(true);\n});\n\ntest(\"Bcrypt\", async () => {\n\tconst password = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tconst bcrypt = new Bcrypt();\n\tconst hash = await bcrypt.hash(password);\n\texpect(bcrypt.verify(hash, password)).resolves.toBe(true);\n});\n\ntest(\"Argon2id\", async () => {\n\tconst password = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tconst scrypt = new Scrypt();\n\tconst hash = await scrypt.hash(password);\n\texpect(scrypt.verify(hash, password)).resolves.toBe(true);\n});\n"],"mappings":"AAAA,SAAS,MAAM,cAAc;AAC7B,SAAS,UAAU,QAAQ,cAAc;AACzC,SAAS,iBAAiB;AAE1B,KAAK,YAAY,YAAY;AAC5B,QAAM,WAAW,UAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACrE,QAAM,WAAW,IAAI,SAAS;AAC9B,QAAM,OAAO,MAAM,SAAS,KAAK,QAAQ;AACzC,SAAO,SAAS,OAAO,MAAM,QAAQ,CAAC,EAAE,SAAS,KAAK,IAAI;AAC3D,CAAC;AAED,KAAK,UAAU,YAAY;AAC1B,QAAM,WAAW,UAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACrE,QAAM,SAAS,IAAI,OAAO;AAC1B,QAAM,OAAO,MAAM,OAAO,KAAK,QAAQ;AACvC,SAAO,OAAO,OAAO,MAAM,QAAQ,CAAC,EAAE,SAAS,KAAK,IAAI;AACzD,CAAC;AAED,KAAK,YAAY,YAAY;AAC5B,QAAM,WAAW,UAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACrE,QAAM,SAAS,IAAI,OAAO;AAC1B,QAAM,OAAO,MAAM,OAAO,KAAK,QAAQ;AACvC,SAAO,OAAO,OAAO,MAAM,QAAQ,CAAC,EAAE,SAAS,KAAK,IAAI;AACzD,CAAC;","names":[]}