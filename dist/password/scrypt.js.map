{"version":3,"sources":["../../src/password/scrypt.ts"],"sourcesContent":["import { scrypt } from \"node:crypto\";\nimport { decodeHex, encodeHex } from \"../encoding/index.js\";\nimport { constantTimeEqual } from \"../crypto/index.js\";\n\nimport type { PasswordHashingAlgorithm } from \"./index.js\";\n\nexport class Scrypt implements PasswordHashingAlgorithm {\n\tconstructor(options?: { N?: number; r?: number; p?: number; dkLen?: number }) {\n\t\tthis.N = options?.N ?? 16384;\n\t\tthis.r = options?.r ?? 16;\n\t\tthis.p = options?.p ?? 1;\n\t\tthis.dkLen = options?.dkLen ?? 64;\n\t}\n\n\tprivate N: number;\n\tprivate r: number;\n\tprivate p: number;\n\tprivate dkLen: number;\n\n\tpublic async hash(password: string): Promise<string> {\n\t\tconst salt = encodeHex(crypto.getRandomValues(new Uint8Array(16)));\n\t\tconst key = await this.generateKey(password, salt);\n\t\treturn `${salt}:${encodeHex(key)}`;\n\t}\n\n\tpublic async verify(hash: string, password: string): Promise<boolean> {\n\t\tconst [salt, key] = hash.split(\":\");\n\t\tconst targetKey = await this.generateKey(password, salt!);\n\t\treturn constantTimeEqual(targetKey, decodeHex(key!));\n\t}\n\n\tprivate async generateKey(password: string, salt: string): Promise<ArrayBuffer> {\n\t\treturn await new Promise<ArrayBuffer>((resolve, reject) => {\n\t\t\tscrypt(\n\t\t\t\tpassword.normalize(\"NFKC\"),\n\t\t\t\tsalt!,\n\t\t\t\tthis.dkLen,\n\t\t\t\t{\n\t\t\t\t\tN: this.N,\n\t\t\t\t\tp: this.p,\n\t\t\t\t\tr: this.r,\n\t\t\t\t\t// errors when 128 * N * r > `maxmem` (approximately)\n\t\t\t\t\tmaxmem: 128 * this.N * this.r * 2\n\t\t\t\t},\n\t\t\t\t(err, buff) => {\n\t\t\t\t\tif (err) return reject(err);\n\t\t\t\t\treturn resolve(buff);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n"],"mappings":"AAAA,SAAS,cAAc;AACvB,SAAS,WAAW,iBAAiB;AACrC,SAAS,yBAAyB;AAI3B,MAAM,OAA2C;AAAA,EACvD,YAAY,SAAkE;AAC7E,SAAK,IAAI,SAAS,KAAK;AACvB,SAAK,IAAI,SAAS,KAAK;AACvB,SAAK,IAAI,SAAS,KAAK;AACvB,SAAK,QAAQ,SAAS,SAAS;AAAA,EAChC;AAAA,EAEQ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,MAAa,KAAK,UAAmC;AACpD,UAAM,OAAO,UAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACjE,UAAM,MAAM,MAAM,KAAK,YAAY,UAAU,IAAI;AACjD,WAAO,GAAG,IAAI,IAAI,UAAU,GAAG,CAAC;AAAA,EACjC;AAAA,EAEA,MAAa,OAAO,MAAc,UAAoC;AACrE,UAAM,CAAC,MAAM,GAAG,IAAI,KAAK,MAAM,GAAG;AAClC,UAAM,YAAY,MAAM,KAAK,YAAY,UAAU,IAAK;AACxD,WAAO,kBAAkB,WAAW,UAAU,GAAI,CAAC;AAAA,EACpD;AAAA,EAEA,MAAc,YAAY,UAAkB,MAAoC;AAC/E,WAAO,MAAM,IAAI,QAAqB,CAAC,SAAS,WAAW;AAC1D;AAAA,QACC,SAAS,UAAU,MAAM;AAAA,QACzB;AAAA,QACA,KAAK;AAAA,QACL;AAAA,UACC,GAAG,KAAK;AAAA,UACR,GAAG,KAAK;AAAA,UACR,GAAG,KAAK;AAAA;AAAA,UAER,QAAQ,MAAM,KAAK,IAAI,KAAK,IAAI;AAAA,QACjC;AAAA,QACA,CAAC,KAAK,SAAS;AACd,cAAI;AAAK,mBAAO,OAAO,GAAG;AAC1B,iBAAO,QAAQ,IAAI;AAAA,QACpB;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AACD;","names":[]}