{"version":3,"sources":["../../src/oauth2/index.ts"],"sourcesContent":["import { sha256 } from \"../crypto/index.js\";\nimport { base64, base64url } from \"../encoding/index.js\";\n\nexport class OAuth2Client {\n\tpublic clientId: string;\n\n\tprivate authorizeEndpoint: string;\n\tprivate tokenEndpoint: string;\n\tprivate redirectURI: string | null;\n\n\tconstructor(\n\t\tclientId: string,\n\t\tauthorizeEndpoint: string,\n\t\ttokenEndpoint: string,\n\t\toptions?: {\n\t\t\tredirectURI?: string;\n\t\t}\n\t) {\n\t\tthis.clientId = clientId;\n\t\tthis.authorizeEndpoint = authorizeEndpoint;\n\t\tthis.tokenEndpoint = tokenEndpoint;\n\t\tthis.redirectURI = options?.redirectURI ?? null;\n\t}\n\n\tpublic async createAuthorizationURL(options?: {\n\t\tstate?: string;\n\t\tcodeVerifier?: string;\n\t\tscopes?: string[];\n\t}): Promise<URL> {\n\t\tconst scopes = Array.from(new Set(options?.scopes ?? [])); // remove duplicates\n\t\tconst authorizationUrl = new URL(this.authorizeEndpoint);\n\t\tauthorizationUrl.searchParams.set(\"response_type\", \"code\");\n\t\tauthorizationUrl.searchParams.set(\"client_id\", this.clientId);\n\t\tif (options?.state !== undefined) {\n\t\t\tauthorizationUrl.searchParams.set(\"state\", options.state);\n\t\t}\n\t\tif (scopes.length > 0) {\n\t\t\tauthorizationUrl.searchParams.set(\"scope\", scopes.join(\" \"));\n\t\t}\n\t\tif (this.redirectURI !== null) {\n\t\t\tauthorizationUrl.searchParams.set(\"redirect_uri\", this.redirectURI);\n\t\t}\n\t\tif (options?.codeVerifier !== undefined) {\n\t\t\tconst codeChallengeBuffer = await sha256(new TextEncoder().encode(options.codeVerifier));\n\t\t\tconst codeChallenge = base64url.encode(new Uint8Array(codeChallengeBuffer), {\n\t\t\t\tincludePadding: false\n\t\t\t});\n\t\t\tauthorizationUrl.searchParams.set(\"code_challenge_method\", \"S256\");\n\t\t\tauthorizationUrl.searchParams.set(\"code_challenge\", codeChallenge);\n\t\t}\n\t\treturn authorizationUrl;\n\t}\n\n\tpublic async validateAuthorizationCode<_TokenResponseBody extends TokenResponseBody>(\n\t\tauthorizationCode: string,\n\t\toptions?: {\n\t\t\tcodeVerifier?: string;\n\t\t\tcredentials?: string;\n\t\t\tauthenticateWith?: \"http_basic_auth\" | \"request_body\";\n\t\t}\n\t): Promise<_TokenResponseBody> {\n\t\tconst body = new URLSearchParams();\n\t\tbody.set(\"code\", authorizationCode);\n\t\tbody.set(\"client_id\", this.clientId);\n\t\tbody.set(\"grant_type\", \"authorization_code\");\n\n\t\tif (this.redirectURI !== null) {\n\t\t\tbody.set(\"redirect_uri\", this.redirectURI);\n\t\t}\n\t\tif (options?.codeVerifier !== undefined) {\n\t\t\tbody.set(\"code_verifier\", options.codeVerifier);\n\t\t}\n\t\treturn await this.sendTokenRequest<_TokenResponseBody>(body, options);\n\t}\n\n\tpublic async refreshAccessToken<_TokenResponseBody extends TokenResponseBody>(\n\t\trefreshToken: string,\n\t\toptions?: {\n\t\t\tcredentials?: string;\n\t\t\tauthenticateWith?: \"http_basic_auth\" | \"request_body\";\n\t\t\tscopes?: string[];\n\t\t}\n\t): Promise<_TokenResponseBody> {\n\t\tconst body = new URLSearchParams();\n\t\tbody.set(\"refresh_token\", refreshToken);\n\t\tbody.set(\"client_id\", this.clientId);\n\t\tbody.set(\"grant_type\", \"refresh_token\");\n\n\t\tconst scopes = Array.from(new Set(options?.scopes ?? [])); // remove duplicates\n\t\tif (scopes.length > 0) {\n\t\t\tbody.set(\"scope\", scopes.join(\" \"));\n\t\t}\n\n\t\treturn await this.sendTokenRequest<_TokenResponseBody>(body, options);\n\t}\n\n\tprivate async sendTokenRequest<_TokenResponseBody extends TokenResponseBody>(\n\t\tbody: URLSearchParams,\n\t\toptions?: {\n\t\t\tcredentials?: string;\n\t\t\tauthenticateWith?: \"http_basic_auth\" | \"request_body\";\n\t\t}\n\t): Promise<_TokenResponseBody> {\n\t\tconst headers = new Headers();\n\t\theaders.set(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\t\theaders.set(\"Accept\", \"application/json\");\n\t\theaders.set(\"User-Agent\", \"oslo\");\n\n\t\tif (options?.credentials !== undefined) {\n\t\t\tconst authenticateWith = options?.authenticateWith ?? \"http_basic_auth\";\n\t\t\tif (authenticateWith === \"http_basic_auth\") {\n\t\t\t\tconst encodedCredentials = base64.encode(\n\t\t\t\t\tnew TextEncoder().encode(`${this.clientId}:${options.credentials}`)\n\t\t\t\t);\n\t\t\t\theaders.set(\"Authorization\", `Basic ${encodedCredentials}`);\n\t\t\t} else {\n\t\t\t\tbody.set(\"client_secret\", options.credentials);\n\t\t\t}\n\t\t}\n\n\t\tconst request = new Request(this.tokenEndpoint, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders,\n\t\t\tbody\n\t\t});\n\t\tconst response = await fetch(request);\n\t\tconst result: _TokenResponseBody | TokenErrorResponseBody = await response.json();\n\n\t\t// providers are allowed to return non-400 status code for errors\n\t\tif (!(\"access_token\" in result) && \"error\" in result) {\n\t\t\tthrow new OAuth2RequestError(request, result);\n\t\t} else if (!response.ok) {\n\t\t\tthrow new OAuth2RequestError(request, {});\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport function generateCodeVerifier(): string {\n\tconst randomValues = new Uint8Array(32);\n\tcrypto.getRandomValues(randomValues);\n\treturn base64url.encode(randomValues, {\n\t\tincludePadding: false\n\t});\n}\n\nexport function generateState(): string {\n\tconst randomValues = new Uint8Array(32);\n\tcrypto.getRandomValues(randomValues);\n\treturn base64url.encode(randomValues, {\n\t\tincludePadding: false\n\t});\n}\n\nexport class OAuth2RequestError extends Error {\n\tpublic request: Request;\n\tpublic description: string | null;\n\tconstructor(request: Request, body: Partial<TokenErrorResponseBody>) {\n\t\tsuper(body.error ?? \"\");\n\t\tthis.request = request;\n\t\tthis.description = body.error_description ?? null;\n\t}\n}\n\ninterface TokenErrorResponseBody {\n\terror: string;\n\terror_description?: string;\n}\n\nexport interface TokenResponseBody {\n\taccess_token: string;\n\ttoken_type?: string;\n\texpires_in?: number;\n\trefresh_token?: string;\n\tscope?: string;\n}\n"],"mappings":"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","names":[]}