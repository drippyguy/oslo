{"version":3,"sources":["../src/bytes.test.ts"],"sourcesContent":["import { test, expect } from \"vitest\";\nimport {\n\tbinaryToInteger,\n\tbyteToBinary,\n\tbytesToBinary,\n\tbytesToInteger,\n\tcompareBytes\n} from \"./bytes.js\";\n\ntest(\"bitsToInt()\", () => {\n\texpect(binaryToInteger(\"110100101000010101\")).toBe(215573);\n});\n\ntest(\"byteToBits()\", () => {\n\texpect(byteToBinary(101)).toBe(\"01100101\");\n});\n\ntest(\"bytesToBits()\", () => {\n\texpect(bytesToBinary(new Uint8Array([203, 3, 41, 76]))).toBe(\"11001011000000110010100101001100\");\n});\n\ntest(\"bytesToInteger()\", () => {\n\tconst bytes = Uint8Array.from([54, 204, 4, 128]);\n\texpect(bytesToInteger(bytes)).toBe(new DataView(bytes.buffer).getUint32(0));\n});\n\ntest(\"compareBytes()\", () => {\n\tconst randomBytes = new Uint8Array(32);\n\tcrypto.getRandomValues(randomBytes);\n\texpect(compareBytes(randomBytes, randomBytes)).toBe(true);\n\tconst anotherRandomBytes = new Uint8Array(32);\n\tcrypto.getRandomValues(anotherRandomBytes);\n\texpect(compareBytes(randomBytes, anotherRandomBytes)).toBe(false);\n});\n"],"mappings":";AAAA,oBAA6B;AAC7B,mBAMO;AAAA,IAEP,oBAAK,eAAe,MAAM;AACzB,gCAAO,8BAAgB,oBAAoB,CAAC,EAAE,KAAK,MAAM;AAC1D,CAAC;AAAA,IAED,oBAAK,gBAAgB,MAAM;AAC1B,gCAAO,2BAAa,GAAG,CAAC,EAAE,KAAK,UAAU;AAC1C,CAAC;AAAA,IAED,oBAAK,iBAAiB,MAAM;AAC3B,gCAAO,4BAAc,IAAI,WAAW,CAAC,KAAK,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,kCAAkC;AAChG,CAAC;AAAA,IAED,oBAAK,oBAAoB,MAAM;AAC9B,QAAM,QAAQ,WAAW,KAAK,CAAC,IAAI,KAAK,GAAG,GAAG,CAAC;AAC/C,gCAAO,6BAAe,KAAK,CAAC,EAAE,KAAK,IAAI,SAAS,MAAM,MAAM,EAAE,UAAU,CAAC,CAAC;AAC3E,CAAC;AAAA,IAED,oBAAK,kBAAkB,MAAM;AAC5B,QAAM,cAAc,IAAI,WAAW,EAAE;AACrC,SAAO,gBAAgB,WAAW;AAClC,gCAAO,2BAAa,aAAa,WAAW,CAAC,EAAE,KAAK,IAAI;AACxD,QAAM,qBAAqB,IAAI,WAAW,EAAE;AAC5C,SAAO,gBAAgB,kBAAkB;AACzC,gCAAO,2BAAa,aAAa,kBAAkB,CAAC,EAAE,KAAK,KAAK;AACjE,CAAC;","names":[]}