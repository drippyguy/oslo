{"version":3,"sources":["../../src/encoding/base64.ts"],"sourcesContent":["import type { TypedArray } from \"../index.js\";\nimport type { Encoding } from \"./index.js\";\n\nexport class Base64Encoding implements Encoding {\n\tpublic alphabet: string;\n\tpublic padding: string;\n\n\tprivate decodeMap = new Map<string, number>();\n\n\tconstructor(\n\t\talphabet: string,\n\t\toptions?: {\n\t\t\tpadding?: string;\n\t\t}\n\t) {\n\t\tif (alphabet.length !== 64) {\n\t\t\tthrow new Error(\"Invalid alphabet\");\n\t\t}\n\t\tthis.alphabet = alphabet;\n\t\tthis.padding = options?.padding ?? \"=\";\n\t\tif (this.alphabet.includes(this.padding) || this.padding.length !== 1) {\n\t\t\tthrow new Error(\"Invalid padding\");\n\t\t}\n\t\tfor (let i = 0; i < alphabet.length; i++) {\n\t\t\tthis.decodeMap.set(alphabet[i]!, i);\n\t\t}\n\t}\n\n\tpublic encode(\n\t\tdata: Uint8Array,\n\t\toptions?: {\n\t\t\tincludePadding?: boolean;\n\t\t}\n\t): string {\n\t\tlet result = \"\";\n\t\tlet buffer = 0;\n\t\tlet shift = 0;\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\tbuffer = (buffer << 8) | data[i]!;\n\t\t\tshift += 8;\n\t\t\twhile (shift >= 6) {\n\t\t\t\tshift += -6;\n\t\t\t\tresult += this.alphabet[(buffer >> shift) & 0x3f];\n\t\t\t}\n\t\t}\n\t\tif (shift > 0) {\n\t\t\tresult += this.alphabet[(buffer << (6 - shift)) & 0x3f];\n\t\t}\n\t\tconst includePadding = options?.includePadding ?? true;\n\t\tif (includePadding) {\n\t\t\tconst padCount = (4 - (result.length % 4)) % 4;\n\t\t\tfor (let i = 0; i < padCount; i++) {\n\t\t\t\tresult += \"=\";\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic decode(\n\t\tdata: string,\n\t\toptions?: {\n\t\t\tstrict?: boolean;\n\t\t}\n\t): Uint8Array {\n\t\tconst strict = options?.strict ?? true;\n\t\tconst chunkCount = Math.ceil(data.length / 4);\n\t\tconst result: number[] = [];\n\t\tfor (let i = 0; i < chunkCount; i++) {\n\t\t\tlet padCount = 0;\n\t\t\tlet buffer = 0;\n\t\t\tfor (let j = 0; j < 4; j++) {\n\t\t\t\tconst encoded = data[i * 4 + j];\n\t\t\t\tif (encoded === \"=\") {\n\t\t\t\t\tif (i + 1 !== chunkCount) {\n\t\t\t\t\t\tthrow new Error(`Invalid character: ${encoded}`);\n\t\t\t\t\t}\n\t\t\t\t\tpadCount += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (encoded === undefined) {\n\t\t\t\t\tif (strict) {\n\t\t\t\t\t\tthrow new Error(\"Invalid data\");\n\t\t\t\t\t}\n\t\t\t\t\tpadCount += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst value = this.decodeMap.get(encoded) ?? null;\n\t\t\t\tif (value === null) {\n\t\t\t\t\tthrow new Error(`Invalid character: ${encoded}`);\n\t\t\t\t}\n\t\t\t\tbuffer += value << (6 * (3 - j));\n\t\t\t}\n\t\t\tresult.push((buffer >> 16) & 0xff);\n\t\t\tif (padCount < 2) {\n\t\t\t\tresult.push((buffer >> 8) & 0xff);\n\t\t\t}\n\t\t\tif (padCount < 1) {\n\t\t\t\tresult.push(buffer & 0xff);\n\t\t\t}\n\t\t}\n\t\treturn Uint8Array.from(result);\n\t}\n}\n\nexport const base64 = new Base64Encoding(\n\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n);\n\nexport const base64url = new Base64Encoding(\n\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n);\n\n/** @deprecated Use `base64.encode()` instead */\nexport function encodeBase64(\n\tdata: ArrayBuffer | TypedArray,\n\toptions?: {\n\t\tpadding?: boolean;\n\t}\n): string {\n\treturn base64.encode(new Uint8Array(data), {\n\t\tincludePadding: options?.padding ?? true\n\t});\n}\n\n/** @deprecated Use `base64.decode()` instead */\nexport function decodeBase64(data: string): Uint8Array {\n\treturn base64.decode(data, {\n\t\tstrict: false\n\t});\n}\n\n/** @deprecated Use `base64url.encode()` instead */\nexport function encodeBase64url(data: ArrayBuffer | TypedArray): string {\n\treturn base64.encode(new Uint8Array(data), {\n\t\tincludePadding: false\n\t});\n}\n\n/** @deprecated Use `base64url.decode()` instead */\nexport function decodeBase64url(data: string): Uint8Array {\n\treturn base64url.decode(data, {\n\t\tstrict: false\n\t});\n}\n"],"mappings":"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","names":[]}