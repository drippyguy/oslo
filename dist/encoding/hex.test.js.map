{"version":3,"sources":["../../src/encoding/hex.test.ts"],"sourcesContent":["import { describe, expect, test } from \"vitest\";\nimport { encodeHex, decodeHex } from \"./hex.js\";\n\ndescribe(\"encodeHex()\", () => {\n\ttest(\"Generates valid hex string\", () => {\n\t\tconst cases = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\t\tfor (const length of cases) {\n\t\t\tconst data = crypto.getRandomValues(new Uint8Array(length));\n\t\t\texpect(encodeHex(data)).toBe(Buffer.from(data).toString(\"hex\"));\n\t\t}\n\t});\n});\n\ndescribe(\"Base32.decode()\", () => {\n\ttest(\"Returns encoded data\", () => {\n\t\tconst cases = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\t\tfor (const length of cases) {\n\t\t\tconst data = crypto.getRandomValues(new Uint8Array(length));\n\t\t\tconst encoded = encodeHex(data);\n\t\t\texpect(decodeHex(encoded)).toStrictEqual(data);\n\t\t\texpect(decodeHex(encoded.toUpperCase())).toStrictEqual(data);\n\t\t}\n\t});\n\ttest(\"Throws if data is invalid\", () => {\n\t\texpect(() => decodeHex(\"a\")).toThrow();\n\t});\n});\n"],"mappings":"AAAA,SAAS,UAAU,QAAQ,YAAY;AACvC,SAAS,WAAW,iBAAiB;AAErC,SAAS,eAAe,MAAM;AAC7B,OAAK,8BAA8B,MAAM;AACxC,UAAM,QAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAC/C,eAAW,UAAU,OAAO;AAC3B,YAAM,OAAO,OAAO,gBAAgB,IAAI,WAAW,MAAM,CAAC;AAC1D,aAAO,UAAU,IAAI,CAAC,EAAE,KAAK,OAAO,KAAK,IAAI,EAAE,SAAS,KAAK,CAAC;AAAA,IAC/D;AAAA,EACD,CAAC;AACF,CAAC;AAED,SAAS,mBAAmB,MAAM;AACjC,OAAK,wBAAwB,MAAM;AAClC,UAAM,QAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAC/C,eAAW,UAAU,OAAO;AAC3B,YAAM,OAAO,OAAO,gBAAgB,IAAI,WAAW,MAAM,CAAC;AAC1D,YAAM,UAAU,UAAU,IAAI;AAC9B,aAAO,UAAU,OAAO,CAAC,EAAE,cAAc,IAAI;AAC7C,aAAO,UAAU,QAAQ,YAAY,CAAC,CAAC,EAAE,cAAc,IAAI;AAAA,IAC5D;AAAA,EACD,CAAC;AACD,OAAK,6BAA6B,MAAM;AACvC,WAAO,MAAM,UAAU,GAAG,CAAC,EAAE,QAAQ;AAAA,EACtC,CAAC;AACF,CAAC;","names":[]}