{"version":3,"sources":["../../src/encoding/hex.ts"],"sourcesContent":["import type { TypedArray } from \"../index.js\";\n\nconst hexAlphabet = \"0123456789abcdef\";\n\nconst hexDecodeMap = new Map<string, number>([\n\t[\"0\", 0],\n\t[\"1\", 1],\n\t[\"2\", 2],\n\t[\"3\", 3],\n\t[\"4\", 4],\n\t[\"5\", 5],\n\t[\"6\", 6],\n\t[\"7\", 7],\n\t[\"8\", 8],\n\t[\"9\", 9],\n\n\t[\"A\", 10],\n\t[\"B\", 11],\n\t[\"C\", 12],\n\t[\"D\", 13],\n\t[\"E\", 14],\n\t[\"F\", 15],\n\n\t[\"a\", 10],\n\t[\"b\", 11],\n\t[\"c\", 12],\n\t[\"d\", 13],\n\t[\"e\", 14],\n\t[\"f\", 15]\n]);\n\nexport function encodeHex(data: ArrayBuffer | TypedArray): string {\n\tconst bytes = new Uint8Array(data);\n\tlet result = \"\";\n\tfor (let i = 0; i < bytes.length; i++) {\n\t\tconst key1 = bytes[i]! >> 4;\n\t\tresult += hexAlphabet[key1];\n\t\tconst key2 = bytes[i]! & 0x0f;\n\t\tresult += hexAlphabet[key2];\n\t}\n\treturn result;\n}\n\nexport function decodeHex(data: string): Uint8Array {\n\tconst chunkCount = Math.ceil(data.length / 2);\n\tconst result = new Uint8Array(chunkCount);\n\tfor (let i = 0; i < chunkCount; i++) {\n\t\tlet buffer = 0;\n\n\t\tconst encoded1 = data[i * 2]!;\n\t\tconst value1 = hexDecodeMap.get(encoded1) ?? null;\n\t\tif (value1 === null) {\n\t\t\tthrow new Error(`Invalid character: ${encoded1}`);\n\t\t}\n\t\tbuffer += value1 << 4;\n\n\t\tconst encoded2 = data[i * 2 + 1];\n\t\tif (encoded2 === undefined) {\n\t\t\tthrow new Error(\"Invalid data\");\n\t\t}\n\t\tconst value2 = hexDecodeMap.get(encoded2) ?? null;\n\t\tif (value2 === null) {\n\t\t\tthrow new Error(`Invalid character: ${encoded1}`);\n\t\t}\n\t\tbuffer += value2;\n\n\t\tresult[i] = buffer;\n\t}\n\treturn result;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,cAAc;AAEpB,MAAM,eAAe,oBAAI,IAAoB;AAAA,EAC5C,CAAC,KAAK,CAAC;AAAA,EACP,CAAC,KAAK,CAAC;AAAA,EACP,CAAC,KAAK,CAAC;AAAA,EACP,CAAC,KAAK,CAAC;AAAA,EACP,CAAC,KAAK,CAAC;AAAA,EACP,CAAC,KAAK,CAAC;AAAA,EACP,CAAC,KAAK,CAAC;AAAA,EACP,CAAC,KAAK,CAAC;AAAA,EACP,CAAC,KAAK,CAAC;AAAA,EACP,CAAC,KAAK,CAAC;AAAA,EAEP,CAAC,KAAK,EAAE;AAAA,EACR,CAAC,KAAK,EAAE;AAAA,EACR,CAAC,KAAK,EAAE;AAAA,EACR,CAAC,KAAK,EAAE;AAAA,EACR,CAAC,KAAK,EAAE;AAAA,EACR,CAAC,KAAK,EAAE;AAAA,EAER,CAAC,KAAK,EAAE;AAAA,EACR,CAAC,KAAK,EAAE;AAAA,EACR,CAAC,KAAK,EAAE;AAAA,EACR,CAAC,KAAK,EAAE;AAAA,EACR,CAAC,KAAK,EAAE;AAAA,EACR,CAAC,KAAK,EAAE;AACT,CAAC;AAEM,SAAS,UAAU,MAAwC;AACjE,QAAM,QAAQ,IAAI,WAAW,IAAI;AACjC,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,UAAM,OAAO,MAAM,CAAC,KAAM;AAC1B,cAAU,YAAY,IAAI;AAC1B,UAAM,OAAO,MAAM,CAAC,IAAK;AACzB,cAAU,YAAY,IAAI;AAAA,EAC3B;AACA,SAAO;AACR;AAEO,SAAS,UAAU,MAA0B;AACnD,QAAM,aAAa,KAAK,KAAK,KAAK,SAAS,CAAC;AAC5C,QAAM,SAAS,IAAI,WAAW,UAAU;AACxC,WAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACpC,QAAI,SAAS;AAEb,UAAM,WAAW,KAAK,IAAI,CAAC;AAC3B,UAAM,SAAS,aAAa,IAAI,QAAQ,KAAK;AAC7C,QAAI,WAAW,MAAM;AACpB,YAAM,IAAI,MAAM,sBAAsB,QAAQ,EAAE;AAAA,IACjD;AACA,cAAU,UAAU;AAEpB,UAAM,WAAW,KAAK,IAAI,IAAI,CAAC;AAC/B,QAAI,aAAa,QAAW;AAC3B,YAAM,IAAI,MAAM,cAAc;AAAA,IAC/B;AACA,UAAM,SAAS,aAAa,IAAI,QAAQ,KAAK;AAC7C,QAAI,WAAW,MAAM;AACpB,YAAM,IAAI,MAAM,sBAAsB,QAAQ,EAAE;AAAA,IACjD;AACA,cAAU;AAEV,WAAO,CAAC,IAAI;AAAA,EACb;AACA,SAAO;AACR;","names":[]}