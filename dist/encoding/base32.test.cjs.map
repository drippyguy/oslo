{"version":3,"sources":["../../src/encoding/base32.test.ts"],"sourcesContent":["import { describe, expect, test } from \"vitest\";\nimport { base32 as base32Reference } from \"@scure/base\";\nimport { base32 } from \"./base32.js\";\n\ndescribe(\"Base32.encode()\", () => {\n\ttest(\"Generates valid string\", () => {\n\t\tconst cases = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\t\tfor (const length of cases) {\n\t\t\tconst data = crypto.getRandomValues(new Uint8Array(length));\n\t\t\texpect(base32.encode(data)).toBe(base32Reference.encode(data));\n\t\t}\n\t});\n\ttest(\"Omits padding\", () => {\n\t\tconst data = crypto.getRandomValues(new Uint8Array(4));\n\t\tconst result = base32.encode(data, {\n\t\t\tincludePadding: false\n\t\t});\n\t\tconst expected = base32.encode(data).replaceAll(\"=\", \"\");\n\t\texpect(result).toBe(expected);\n\t});\n});\n\ndescribe(\"Base32.decode()\", () => {\n\ttest(\"Returns encoded data\", () => {\n\t\tconst cases = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\t\tfor (const length of cases) {\n\t\t\tconst data = crypto.getRandomValues(new Uint8Array(length));\n\t\t\tconst encoded = base32.encode(data);\n\t\t\texpect(base32.decode(encoded)).toStrictEqual(data);\n\t\t}\n\t});\n\ttest(\"Throws if data is missing padding in strict mode\", () => {\n\t\tconst data = crypto.getRandomValues(new Uint8Array(4));\n\t\tconst encoded = base32.encode(data, {\n\t\t\tincludePadding: false\n\t\t});\n\t\texpect(() => base32.decode(encoded.replaceAll(\"=\", \"\"))).toThrow();\n\t});\n\ttest(\"Accepts encoded data with missing padding if not in strict mode\", () => {\n\t\tconst data = crypto.getRandomValues(new Uint8Array(4));\n\t\tconst encoded = base32.encode(data, {\n\t\t\tincludePadding: false\n\t\t});\n\t\tconst result = base32.decode(encoded.replaceAll(\"=\", \"\"), {\n\t\t\tstrict: false\n\t\t});\n\t\texpect(result).toStrictEqual(data);\n\t});\n});\n"],"mappings":";AAAA,oBAAuC;AACvC,kBAA0C;AAC1C,oBAAuB;AAAA,IAEvB,wBAAS,mBAAmB,MAAM;AACjC,0BAAK,0BAA0B,MAAM;AACpC,UAAM,QAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAC/C,eAAW,UAAU,OAAO;AAC3B,YAAM,OAAO,OAAO,gBAAgB,IAAI,WAAW,MAAM,CAAC;AAC1D,gCAAO,qBAAO,OAAO,IAAI,CAAC,EAAE,KAAK,YAAAA,OAAgB,OAAO,IAAI,CAAC;AAAA,IAC9D;AAAA,EACD,CAAC;AACD,0BAAK,iBAAiB,MAAM;AAC3B,UAAM,OAAO,OAAO,gBAAgB,IAAI,WAAW,CAAC,CAAC;AACrD,UAAM,SAAS,qBAAO,OAAO,MAAM;AAAA,MAClC,gBAAgB;AAAA,IACjB,CAAC;AACD,UAAM,WAAW,qBAAO,OAAO,IAAI,EAAE,WAAW,KAAK,EAAE;AACvD,8BAAO,MAAM,EAAE,KAAK,QAAQ;AAAA,EAC7B,CAAC;AACF,CAAC;AAAA,IAED,wBAAS,mBAAmB,MAAM;AACjC,0BAAK,wBAAwB,MAAM;AAClC,UAAM,QAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAC/C,eAAW,UAAU,OAAO;AAC3B,YAAM,OAAO,OAAO,gBAAgB,IAAI,WAAW,MAAM,CAAC;AAC1D,YAAM,UAAU,qBAAO,OAAO,IAAI;AAClC,gCAAO,qBAAO,OAAO,OAAO,CAAC,EAAE,cAAc,IAAI;AAAA,IAClD;AAAA,EACD,CAAC;AACD,0BAAK,oDAAoD,MAAM;AAC9D,UAAM,OAAO,OAAO,gBAAgB,IAAI,WAAW,CAAC,CAAC;AACrD,UAAM,UAAU,qBAAO,OAAO,MAAM;AAAA,MACnC,gBAAgB;AAAA,IACjB,CAAC;AACD,8BAAO,MAAM,qBAAO,OAAO,QAAQ,WAAW,KAAK,EAAE,CAAC,CAAC,EAAE,QAAQ;AAAA,EAClE,CAAC;AACD,0BAAK,mEAAmE,MAAM;AAC7E,UAAM,OAAO,OAAO,gBAAgB,IAAI,WAAW,CAAC,CAAC;AACrD,UAAM,UAAU,qBAAO,OAAO,MAAM;AAAA,MACnC,gBAAgB;AAAA,IACjB,CAAC;AACD,UAAM,SAAS,qBAAO,OAAO,QAAQ,WAAW,KAAK,EAAE,GAAG;AAAA,MACzD,QAAQ;AAAA,IACT,CAAC;AACD,8BAAO,MAAM,EAAE,cAAc,IAAI;AAAA,EAClC,CAAC;AACF,CAAC;","names":["base32Reference"]}